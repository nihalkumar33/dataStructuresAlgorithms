//This is o just keep a tack of where I have left, so will continue by index vs length and the merging problem which is giving segmentation fault.


#include<stdio.h>
#include<stdlib.h>

int * splitArray(int * array, int start, int end) {
    int j=0;
    int i=start;
    int * splittedArray = (int *)malloc(sizeof(int) * (start + end));

    while (i <= end) {
        splittedArray[j] = array[i];
        j++; i++;
    }

    return splittedArray;
}

int * mergeArray(int array1[], int length1, int array2[], int length2) {
    int i=0, j=0, k=0;
    int * mergedArray = (int *)malloc(sizeof(int) * (length1 + length2));
    
    for (int i=0; i<(length1 + length2); i++) {
        mergedArray[i] = 0;
    }
 

    while (k < (length1 + length2)) {
        if (i < length1 && j < length2) {
            if (array1[i] < array2[j]) {
                mergedArray[k] = array1[i];
                i++; k++;
            }
    
            else if (array1[i] > array2[j]) {
                mergedArray[k] = array2[j];
                k++; j++;
            }
    
            else {
                mergedArray[k] = array1[i];
                k++; i++; j++;
            }
        }
        
        else if (i >= length1) {
            mergedArray[k] = array2[j];
            k++; j++;
        }
        
        else {
            mergedArray[k] = array1[i];
            k++; i++;
        }
    }
    
    return mergedArray;
}

int main() {
    int array[10] = {1, 3, 7, 10, 13, 20, 2, 5, 8, 11};
    int start = 0;
    int mid = 4;
    int end = 9;
    int * array1 = {1, 3, 7, 10, 13};
    int * array2 = {20, 2, 5, 8, 11};

    int * mergedArray = mergeArray(array1, (mid - start + 1), array2, (end - mid));
    
    printf("\n");
    for (int i=0; i<(10); i++) {
        printf("%d ", mergedArray[i]);
    }
    
    return 0;
}

//Both are different

#include<stdio.h>
#include<stdlib.h>

int * splitArray(int * array, int start, int end) {
    int j=0;
    int i=start;
    int * splittedArray = (int *)malloc(sizeof(int) * (start + end));

    while (i <= end) {
        splittedArray[j] = array[i];
        j++; i++;
    }

    return splittedArray;
}

int * mergeArray(int array1[], int length1, int array2[], int length2) {
    int i=0, j=0, k=0;
    int * mergedArray = (int *)malloc(sizeof(int) * (length1 + length2));
    
    for (int i=0; i<(length1 + length2); i++) {
        mergedArray[i] = 0;
    }
 

    while (k < (length1 + length2)) {
        if (i < length1 && j < length2) {
            if (array1[i] < array2[j]) {
                mergedArray[k] = array1[i];
                i++; k++;
            }
    
            else if (array1[i] > array2[j]) {
                mergedArray[k] = array2[j];
                k++; j++;
            }
    
            else {
                mergedArray[k] = array1[i];
                k++; i++; j++;
            }
        }
        
        else if (i >= length1) {
            mergedArray[k] = array2[j];
            k++; j++;
        }
        
        else {
            mergedArray[k] = array1[i];
            k++; i++;
        }
    }
    
    return mergedArray;
}

int * mergeSort(int * array, int start, int end) {
    int * returnArray;
    if (start != end) {
        int mid = (start + end)/2;
        int * array1 = splitArray(array, start, mid);
        int * array2 = splitArray(array, mid+1, end);
     
        returnArray = mergeArray(mergeSort(array1, 0, (mid - start + 1)), (mid - start + 1), mergeSort(array2, 0, (end - mid - 1)), (end - mid - 1));
    }

    return returnArray;
}

int main() {
    int array[10] = {1, 3, 7, 10, 13, 20, 2, 5, 8, 11};
    int * sortedArray = mergeSort(array, 0, 10);
    
    for (int i=0; i<10; i++) {
        printf("%d ", sortedArray[i]);
    }
    
    return 0;
}
